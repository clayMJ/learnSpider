信息标记
作用:增加信息维度，有利于机器阅读

html: hyper text markup language

xml: extensible markup language    (html的扩展,基于html)   最早扩展性好，繁琐
Internet中信息交互和传递
<img src="china.jpg" size="10"> ... </img>
<name> ... </name>
     <name />
	 <!--   -->

json: JavaScrpit Object Notaiton (健值队,"")  信息有类型，适合程序处理(js),较简洁
移动应用云端和节点的信息交互，无注释
"key" : "value"
"key" : ["value1","value2"]
"key" : {"subkey" : "subvalue"}

yaml  YAML Ain't Markup Language  信息无类型，文本比例最高，可读性好
各类系统配置文件，有注释可读
text: | #注释
key : value 
key : #Comment
-value1
-value2
key :
   subkey : subvalue

提取一般方法 

完整的信息标记形式，再关键信息
XML JSON YAML
需标记解析器   eg:bs4库的标签树遍历
优点:信息解析准确
缺点:过程繁琐,速度慢


无视标记形式，搜索关键信息
搜索
对信息的文本查找函数即可
优点:速度快
缺点:准确度低

融合方法
结合解析和搜索 

实例
提取html的所有url链接
思路 1）搜索到所有<a>标签
     2) 解析<a>标签格式,提取href后到链接内容

find_all(name,attrs,recursive,string,**kwargs)
返回一个列表类型，存储查找的内容
name:对标签名称的检索 
eg:搜索所有tag
for tag in soup.find_all(True):
	print(tag.name)
检索包含b的标签
import re 
for tag in soup.find_all(re.compile('b')):
	print(tag.name)

attrs:对标签属性值的检索字符串，可标注属性检索 
eg:带p属性值的标签
soup.find_all('p','course')
id带link1的
soup.find_all(id='link1)
包含link的
import re
soup.find_all(id=re.compile('link'))

recursive:布尔值，是否对子孙全部搜索，默认为True
eg:
soup.find_all('a')
soup.find_all('a',recursive=False)

string:<>...</>中字符串区域的检索字符串
eg:
soup.find_all(string = "Basic Python")
import re
soup.find_all(string = re.compile('python'))

<tag>()  等价于 <tag>.find_all()
soup()  等价于 soup.find_all()

find_all扩展
find()    返回一个结果
find_parents()
find_parent()
find_next_siblings()
find_next_sibling()
find_previous_siblings()
find_previous_sibling()

中英文对齐问题
空格chr(12288)
